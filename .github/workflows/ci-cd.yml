name: CI/CD Docker ‚Üí Debian

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
        include:
          - service: backend
            context: ./server
            image_name: bikesense-api
          - service: frontend
            context: ./front
            image_name: bikesense-web
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: üîç Security check - Verify no compromised packages
        run: |
          echo "Checking for compromised package versions..."
          if grep -E '"chalk":\s*"5\.6\.1"|"debug":\s*"4\.4\.2"|"ansi-styles":\s*"6\.2\.2"' front/package-lock.json server/package-lock.json 2>/dev/null; then
            echo "‚ùå COMPROMISED PACKAGES DETECTED!"
            exit 1
          fi
          echo "‚úÖ No compromised package versions found"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üê≥ Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NPM_CONFIG_IGNORE_SCRIPTS=true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.image_name }}:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.image_name }}:latest

  deploy:
    name: Deploy on Debian via SSH
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: üîë SSH & deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: "2320"
          script: |
            # Cr√©er et aller dans le dossier de d√©ploiement
            mkdir -p ~/bikesense
            cd ~/bikesense

            # Nettoyer les anciens conteneurs si n√©cessaire
            docker compose down --remove-orphans 2>/dev/null || true

            # Pull les nouvelles images depuis Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/bikesense-api:${{ github.sha }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/bikesense-web:${{ github.sha }}

            # Red√©marrer les services avec les nouvelles images
            export BIKESENSE_API_TAG=${{ github.sha }}
            export BIKESENSE_WEB_TAG=${{ github.sha }}
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            
            # Utiliser le fichier de production
            cp docker-compose.production.yml docker-compose.yml
            docker compose up -d

            # Attendre que les services soient pr√™ts
            sleep 30

            # V√©rification post-d√©ploiement
            echo "‚úÖ Checking services health..."
            docker compose ps
            
            # Test de sant√© des services
            echo "üè• Health checks..."
            curl -f http://localhost:3000/api/health || echo "‚ùå Backend health check failed"
            curl -f http://localhost/ || echo "‚ùå Frontend health check failed"
            
            echo "‚úÖ Deployment completed successfully"

      - name: üìã Copy docker-compose to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: "2320"
          source: "docker-compose.production.yml"
          target: "~/bikesense/"
          overwrite: true